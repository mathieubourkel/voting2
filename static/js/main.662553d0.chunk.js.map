{"version":3,"sources":["components/Footer.js","components/Sections/GetVoter.js","components/Navbar.js","components/Header.js","components/Sections/Proposals.js","components/Sections/Winner.js","components/Main.js","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["Footer","GetVoter","state","useState","registered","hasVoted","proposalId","display","stateGetVoter","setStateGetVoter","getVoter","e","a","preventDefault","accounts","contract","address","document","getElementById","value","Web3","utils","isAddress","methods","call","from","voter","isRegistered","votedProposalId","console","log","alert","type","id","placeholder","onClick","toString","Navbar","stateVoter","stateStatus","setStatus","owned","flowstatus","className","nextstatus","Header","Proposals","proposals","stateProposals","setStateProposals","useEffect","options","fromBlock","toBlock","getPastEvents","listProposals","addProposal","proposal","send","tempListProposals","setVote","param1","window","location","reload","map","returnValues","description","Winner","winnerId","name","count","stateWinner","setStateWinner","winningProposalID","getOneProposal","winner","voteCount","Main","addVoter","getWeb3","Promise","resolve","reject","addEventListener","ethereum","web3","enable","on","provider","providers","HttpProvider","App","setState","setStateStatus","setStateVoter","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","workflowStatus","status","owner","register","error","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.662553d0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Footer() {\n\n       return  (\n            <div>\n                  <p>Copyright 2022 - Mathieu BOURKEL</p>\n            </div>\n          )\n }\n\nexport default Footer;","import React, { useState } from \"react\";\nimport Web3 from \"web3\";\n\nfunction GetVoter({state}) {\n    const [stateGetVoter, setStateGetVoter] = useState({registered: false, hasVoted: false, proposalId: 0, display: false});\n\n      const getVoter = async (e) => {\n        e.preventDefault();\n        const { accounts, contract } = state;\n        let address = document.getElementById(\"getvoter\").value;\n        if (Web3.utils.isAddress(address) == true) {\n          const voter = await state.contract.methods.getVoter(address).call({ from: accounts[0] });\n          let registered = voter.isRegistered == true;\n          let hasVoted = voter.hasVoted == true;\n          let proposalId = voter.votedProposalId;\n          setStateGetVoter({registered: registered, hasVoted: hasVoted, proposalId: proposalId, display: true});\n          console.log(voter);\n        } else {\n          alert(\"Please enter a valid address\")\n        };\n      }\n\n    if (stateGetVoter.display == true) {\n\n       return (\n          <div>\n                <input type=\"text\" id=\"getvoter\" placeholder=\"address\" />\n                <button onClick={getVoter}>Search</button>\n                <p>Addres registered : {stateGetVoter.registered.toString()}</p>  \n                <p>has Voted : {stateGetVoter.hasVoted.toString()}</p>\n                <p>Voted for : {stateGetVoter.proposalId}</p>\n            </div>\n            )\n       } else { \n           return (\n            <div>\n                <input type=\"text\" id=\"getvoter\" placeholder=\"address\" />\n                <button onClick={getVoter}>Search</button>\n            </div>\n           )}\n }\n\nexport default GetVoter;","import React from 'react';\nimport GetVoter from './Sections/GetVoter';\nimport { Button } from 'react-bootstrap';\n\nfunction Navbar({state, stateVoter, stateStatus, setStatus}) {\n\n      if (state.owned == true) {\n            if (stateStatus.flowstatus == \"VotesTallied\") {\n                  return (\n                        <div className='navbar mx-3 mb-5'>\n                        <div className='search'>\n                              <GetVoter stateVoter={stateVoter} state={state} />\n                        </div>\n                        <div className='display-status'>\n                              <h4>Status: {stateStatus.flowstatus}</h4>\n                        </div>\n                  </div>\n                  )\n            } else {\n                  return (\n                        <div className='navbar mx-3 mb-5'>\n                              <div className='search'>\n                                    <GetVoter stateVoter={stateVoter} state={state} />\n                              </div>\n                              <div className='display-status'>\n                                    <h4>Status: {stateStatus.flowstatus}</h4>\n                              </div>\n                              <div className='btn-next-status'>\n                                    <button className='btn btn-success' onClick={setStatus}>{stateStatus.nextstatus}</button> \n                              </div>\n                        </div> \n                        )};\n      } else {\n            return <div className='navbar mx-3 mb-5'>\n            <div className='search'>\n                  <GetVoter stateVoter={stateVoter} state={state} />\n            </div>\n            <div className='display-status'>\n                  <h4>Status: {stateStatus.flowstatus}</h4>\n            </div>\n      </div>\n      }\n }\n\nexport default Navbar;","import React from \"react\";\n\nfunction Header({state}) {\n\n          return (\n\n                  <div className='addr text-right'>\n                        Connected Wallet : {state.accounts[0]}\n                  </div>      \n\n          );  \n}\n\nexport default Header;","import React, { useState, useEffect } from \"react\";\n\nfunction Proposals({ stateStatus, state, stateVoter }) {\n\n    const [stateProposals, setStateProposals] = useState({proposals: null});\n    \n    useEffect(() => {\n        (async function () {\n          try {\n            let options = {\n                fromBlock: 0, \n                toBlock: 'latest'\n              };\n            const listProposals = await state.contract.getPastEvents('ProposalRegistered', options);\n            setStateProposals({proposals: listProposals});\n            } catch (error) {\n                return <div>Error when trying to catch the proposals</div>\n                console.error(error);\n                }\n        })();\n      }, [])\n\n      const addProposal = async (e) => {\n        e.preventDefault();\n        const { accounts, contract } = state;\n        let proposal = document.getElementById(\"proposal\").value;\n        await contract.methods.addProposal(proposal).send({ from: accounts[0] });\n        let options = {\n          fromBlock: 0, \n          toBlock: 'latest'\n        };\n        let tempListProposals = await contract.getPastEvents('ProposalRegistered', options);\n        setStateProposals({proposals: tempListProposals});\n      }\n\n      const setVote = async (param1) => {\n        const { accounts, contract } = state;\n        await contract.methods.setVote(param1).send({ from: accounts[0] });\n        window.location.reload();\n      }\n\n        if (stateProposals.proposals == null) {\n            return (\n                <div className='proposals'>\n                    <div className='title-proposals'>\n                        <h2>PROPOSALS</h2>\n                    </div>\n                    <div className='add-proposal'>\n                        <input type=\"text\" id=\"proposal\" placeholder=\"proposal\" />\n                        <button onClick={addProposal}>ADD PROPOSAL</button>\n                    </div>\n                    <p>No proposals available</p>\n                </div>\n            )\n        } else if (stateStatus.flowstatus == \"ProposalsRegistrationStarted\") {\n            return (\n                <div className='proposals'>\n                    <div className='title-proposals'>\n                        <h2>PROPOSALS</h2>\n                    </div>\n                    <div className='add-proposal mb-4'>\n                        <input type=\"text\" id=\"proposal\" placeholder=\"write here\" />\n                        <button onClick={addProposal}>Add Proposal</button>\n                    </div>\n                    <ul className='get-proposals list-group'>\n                    {stateProposals.proposals.map((proposal) => (\n                        <li className='list-group-item w-50 mx-auto my-1 bg-light h4'>{proposal.returnValues.description}</li>\n                    ))}\n                </ul> \n                </div>\n            )\n        \n        } else if (stateStatus.flowstatus == \"ProposalsRegistrationEnded\") {\n            return (\n                <div className='proposals'>\n                    <div className='title-proposals'>\n                        <h2>PROPOSALS</h2>\n                    </div>\n                    <ul className='get-proposals list-group'>\n                    {stateProposals.proposals.map((proposal) => (\n                        <li className='list-group-item w-50 mx-auto my-1 bg-light h4'>{proposal.returnValues.description}</li>\n                    ))}\n                </ul> \n                </div>\n            ) \n        } else if (stateStatus.flowstatus == \"VotingSessionStarted\") {\n            if (stateVoter.hasVoted == false) {\n                return (\n                    <div className='proposals'>\n                        <div className='title-proposals'>\n                            <h2>PROPOSALS</h2>\n                        </div>\n                        <ul className='get-proposals list-group'>\n                            {stateProposals.proposals.map((proposal) => (\n                                <li className='list-group-item w-50 mx-auto my-1 bg-light h4'>\n                                    {proposal.returnValues.description}\n                                    <button className='mx-5 bg-success' onClick={e => { e.preventDefault(); setVote(proposal.returnValues.proposalId)}}>Vote</button> \n                                </li>\n                            ))}\n                        </ul> \n                    </div>\n                    )\n            } else {\n                return (\n                    <div className='proposals'>\n                        <div className='title-proposals'>\n                            <h2>PROPOSALS</h2>\n                        </div>\n                        <ul className='get-proposals list-group'>\n                            {stateProposals.proposals.map((proposal) => (\n                            <li className='list-group-item w-50 mx-auto my-1 bg-light h4'>{proposal.returnValues.description}</li>\n                    ))}\n                        </ul> \n                    </div>\n                    )\n            }\n        } else if (stateStatus.flowstatus == \"VotingSessionEnded\") {\n            return (\n                <div className='proposals'>\n                    <div className='title-proposals'>\n                        <h2>PROPOSALS</h2>\n                    </div>\n                    <ul className='get-proposals list-group'>\n                            {stateProposals.proposals.map((proposal) => (\n                            <li className='list-group-item w-50 mx-auto my-1 bg-light h4'>{proposal.returnValues.description}</li>\n                    ))}\n                    </ul> \n                </div>\n                )\n\n        } else { return <div></div>}\n    }\n\nexport default Proposals;","import React, { useState, useEffect } from \"react\";\n\nfunction Winner({state}) {\n        const [stateWinner, setStateWinner] = useState({winnerId: 0, name: null, count:0});\n        useEffect(() => {\n            (async function () {\n              try {\n                const winnerId = await state.contract.methods.winningProposalID().call({ from: state.accounts[0] });\n                const winner = await state.contract.methods.getOneProposal(winnerId).call({ from: state.accounts[0] });\n                const name = winner.description;\n                const count = winner.voteCount;\n                setStateWinner({winnerId: winnerId, name: name, count: count});\n                } catch (error) {\n                    return <div>Error when trying to catch the proposals</div>\n                    console.error(error);\n                    }\n            })();\n          }, [])\n          console.log(stateWinner.winner);\n        return (\n            <div className='resultat'>\n                <h2 className='mb-5'>THE WINNER IS</h2>\n                <h3 className='bg-primary w-50 mx-auto'>Winner ID : {stateWinner.winnerId}</h3>\n                <h3 className='w-50 mx-auto'>Name : {stateWinner.name}</h3>\n                <h3 className='bg-danger w-50 mx-auto'>Count : {stateWinner.count}</h3>\n            </div>\n            )\n }\n\nexport default Winner;","import React from \"react\";\nimport Proposals from \"./Sections/Proposals.js\";\nimport Winner from \"./Sections/Winner.js\";\n\nfunction Main({state, stateStatus, addVoter, stateVoter}) {\n\n    if (stateStatus.flowstatus == \"RegisteringVoters\"){\n        if (state.owned == true) {\n            return (\n\n                <div className='main'>\n                    <h3 className='mb-5'>Hello Administrator, you can now registering the voters!</h3>\n                    <div className='add-voter'>\n                        <input type=\"text\" id=\"address\" placeholder=\"address\" />\n                        <button onClick={addVoter}>ADD VOTER</button>\n                    </div>\n                </div>\n            )\n\n        } else {\n            return (\n\n                <div className='main'>\n                    The owner is actually registering the voters, please be patient you will be able to access to the vote soon\n                </div>\n            )\n        };\n\n    } else if (stateStatus.flowstatus == \"ProposalsRegistrationStarted\" || \n    stateStatus.flowstatus == \"ProposalsRegistrationEnded\" || stateStatus.flowstatus == \"VotingSessionStarted\" || stateStatus.flowstatus == \"VotingSessionEnded\"){\n\n        return (\n\n            <Proposals state={state} stateStatus={stateStatus} stateVoter={stateVoter}/>\n        \n    )} else if (stateStatus.flowstatus == \"VotesTallied\") {\n\n        return(\n            <div>\n                <Winner state={state}/>\n                <Proposals state={state} stateStatus={stateStatus} stateVoter={stateVoter}/>\n            </div>\n        )\n\n    } else { \n\n        return <div> Its not the time to access to the voting App</div>\n    }\n}\n\nexport default Main;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n\n          window.ethereum.on('accountsChanged', function() {\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged', function() {\n            window.location.reload();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import Footer from \"./components/Footer.js\";\nimport Navbar from \"./components/Navbar.js\";\nimport Header from \"./components/Header.js\";\nimport Main from \"./components/Main.js\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Web3 from \"web3\";\n\nfunction App() {\n  const [state, setState] = useState({ owned: false, web3: null, accounts: null, contract: null});\n  const [stateStatus, setStateStatus] = useState({flowstatus: null, nextstatus: null});\n  const [stateVoter, setStateVoter] = useState({voter: null, registered: false, hasVoted: false});\n  \n  useEffect(() => {\n      (async function () {\n        try {\n          const web3 = await getWeb3();\n          const accounts = await web3.eth.getAccounts();\n          const networkId = await web3.eth.net.getId();\n          const deployedNetwork = VotingContract.networks[networkId];\n          const instance = new web3.eth.Contract(\n              VotingContract.abi,\n              deployedNetwork && deployedNetwork.address,\n            );\n          const status = await instance.methods.workflowStatus().call();\n          const owner = await instance.methods.owner().call();\n          const register = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n          let flowstatus, nextstatus;\n\n          if (status == 0){\n              flowstatus = \"RegisteringVoters\";\n              nextstatus = \"ProposalsRegistrationStarted\";\n          } else if (status == 1){\n              flowstatus = \"ProposalsRegistrationStarted\";\n              nextstatus = \"ProposalsRegistrationEnded\";\n          } else if(status == 2) {\n              flowstatus = \"ProposalsRegistrationEnded\";\n              nextstatus = \"VotingSessionStarted\";\n          } else if(status == 3) {\n              flowstatus = \"VotingSessionStarted\";\n              nextstatus = \"VotingSessionEnded\";\n          } else if(status == 4) {\n              flowstatus = \"VotingSessionEnded\";\n              nextstatus = \"VotesTallied\";\n          } else if(status == 5) {\n              flowstatus = \"VotesTallied\";\n          };\n          \n          let owned = accounts[0] == owner;\n          let registered = register.isRegistered == true;\n          let hasVoted = register.hasVoted == true;\n\n          setState({ owned: owned, web3: web3, accounts: accounts, contract: instance,  });\n          setStateStatus({ flowstatus: flowstatus, nextstatus: nextstatus}); \n          setStateVoter({registered: registered, hasVoted: hasVoted})\n          \n          } catch (error) {\n            console.error(error);\n          }})();}, [])\n        \nconst setStatus = async (e) => {\n  e.preventDefault();\n  const { accounts, contract } = state;\n  let status = await contract.methods.workflowStatus().call();\n  let flowstatus;\n  let nextstatus;\n  if (status == 0){\n    await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n      flowstatus = \"ProposalsRegistrationStarted\";\n      nextstatus = \"ProposalsRegistrationEnded\";\n  } else if(status == 1) {\n    await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n      flowstatus = \"ProposalsRegistrationEnded\";\n      nextstatus = \"VotingSessionStarted\";\n  } else if(status == 2) {\n    await contract.methods.startVotingSession().send({ from: accounts[0] });\n      flowstatus = \"VotingSessionStarted\";\n      nextstatus = \"VotingSessionEnded\";\n  } else if(status == 3) {\n    await contract.methods.endVotingSession().send({ from: accounts[0] });\n      flowstatus = \"VotingSessionEnded\";\n      nextstatus = \"VotesTallied\";\n  } else if(status == 4) {\n    await contract.methods.tallyVotes().send({ from: accounts[0] }); \n      flowstatus = \"VotesTallied\";\n  };\n  setStateStatus({flowstatus: flowstatus, nextstatus: nextstatus});\n};\n\nconst addVoter = async (e) => {\n  e.preventDefault();\n  const { accounts, contract } = state;\n  let address = document.getElementById(\"address\").value;\n  if (Web3.utils.isAddress(address) == true) {\n      await contract.methods.addVoter(address).send({ from: accounts[0] });\n  } else {\n      alert(\"Please enter a valid address\")\n  };\n}\n\nif (stateVoter.registered == true)  {\n  return(\n    <div className=\"App\">\n      <header className='App-header'>\n        <Header state={state}/>\n      </header>\n      <body className=\"Main d-flex flex-column min-vh-100 mt-3\">\n        <h4 className='w-50 p-2 mx-auto border border-primary'>VOTING DAPP (look vintage)</h4>\n        <Navbar state={state} stateVoter={stateVoter} stateStatus={stateStatus} setStatus={setStatus}/>\n        <Main state={state} stateStatus={stateStatus} addVoter={addVoter} stateVoter={stateVoter}/>\n      </body>\n      <footer className=\"mt-auto\">\n        <Footer />\n      </footer>\n    </div>\n  )\n} else if (state.accounts == null) {\n  return <div className=\"Main d-flex flex-column mt-3 mx-auto w-50 bg-danger\" >\n        <h1 className='mx-auto'>Wallet not found</h1>\n        <h3 className='mx-auto'>You have to connect your wallet, if you have one..</h3>\n    </div>\n} else {\n  return <div className=\"Main d-flex flex-column mt-3 mx-auto w-50 bg-danger\" >\n    <h3 className='mx-auto'>You are not registered as a voter.</h3> \n    <h3 className='mx-auto'>Maybe you can try to kindly ask the admin to be register</h3>\n    </div>;\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}